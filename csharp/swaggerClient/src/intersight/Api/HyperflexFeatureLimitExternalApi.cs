/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-263
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using intersight.Client;
using intersight.Model;

namespace intersight.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHyperflexFeatureLimitExternalApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>HyperflexFeatureLimitExternalList</returns>
        HyperflexFeatureLimitExternalList HyperflexFeatureLimitExternalsGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);

        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>ApiResponse of HyperflexFeatureLimitExternalList</returns>
        ApiResponse<HyperflexFeatureLimitExternalList> HyperflexFeatureLimitExternalsGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);
        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns></returns>
        void HyperflexFeatureLimitExternalsMoidDelete (string moid);

        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HyperflexFeatureLimitExternalsMoidDeleteWithHttpInfo (string moid);
        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>HyperflexFeatureLimitExternal</returns>
        HyperflexFeatureLimitExternal HyperflexFeatureLimitExternalsMoidGet (string moid);

        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>ApiResponse of HyperflexFeatureLimitExternal</returns>
        ApiResponse<HyperflexFeatureLimitExternal> HyperflexFeatureLimitExternalsMoidGetWithHttpInfo (string moid);
        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns></returns>
        void HyperflexFeatureLimitExternalsMoidPatch (string moid, HyperflexFeatureLimitExternal body);

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HyperflexFeatureLimitExternalsMoidPatchWithHttpInfo (string moid, HyperflexFeatureLimitExternal body);
        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns></returns>
        void HyperflexFeatureLimitExternalsMoidPost (string moid, HyperflexFeatureLimitExternal body);

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HyperflexFeatureLimitExternalsMoidPostWithHttpInfo (string moid, HyperflexFeatureLimitExternal body);
        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns></returns>
        void HyperflexFeatureLimitExternalsPost (HyperflexFeatureLimitExternal body);

        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> HyperflexFeatureLimitExternalsPostWithHttpInfo (HyperflexFeatureLimitExternal body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of HyperflexFeatureLimitExternalList</returns>
        System.Threading.Tasks.Task<HyperflexFeatureLimitExternalList> HyperflexFeatureLimitExternalsGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);

        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of ApiResponse (HyperflexFeatureLimitExternalList)</returns>
        System.Threading.Tasks.Task<ApiResponse<HyperflexFeatureLimitExternalList>> HyperflexFeatureLimitExternalsGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null);
        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HyperflexFeatureLimitExternalsMoidDeleteAsync (string moid);

        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsMoidDeleteAsyncWithHttpInfo (string moid);
        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of HyperflexFeatureLimitExternal</returns>
        System.Threading.Tasks.Task<HyperflexFeatureLimitExternal> HyperflexFeatureLimitExternalsMoidGetAsync (string moid);

        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of ApiResponse (HyperflexFeatureLimitExternal)</returns>
        System.Threading.Tasks.Task<ApiResponse<HyperflexFeatureLimitExternal>> HyperflexFeatureLimitExternalsMoidGetAsyncWithHttpInfo (string moid);
        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HyperflexFeatureLimitExternalsMoidPatchAsync (string moid, HyperflexFeatureLimitExternal body);

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsMoidPatchAsyncWithHttpInfo (string moid, HyperflexFeatureLimitExternal body);
        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HyperflexFeatureLimitExternalsMoidPostAsync (string moid, HyperflexFeatureLimitExternal body);

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsMoidPostAsyncWithHttpInfo (string moid, HyperflexFeatureLimitExternal body);
        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task HyperflexFeatureLimitExternalsPostAsync (HyperflexFeatureLimitExternal body);

        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsPostAsyncWithHttpInfo (HyperflexFeatureLimitExternal body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HyperflexFeatureLimitExternalApi : IHyperflexFeatureLimitExternalApi
    {
        private intersight.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HyperflexFeatureLimitExternalApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HyperflexFeatureLimitExternalApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HyperflexFeatureLimitExternalApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HyperflexFeatureLimitExternalApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intersight.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>HyperflexFeatureLimitExternalList</returns>
        public HyperflexFeatureLimitExternalList HyperflexFeatureLimitExternalsGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {
             ApiResponse<HyperflexFeatureLimitExternalList> localVarResponse = HyperflexFeatureLimitExternalsGetWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, at);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>ApiResponse of HyperflexFeatureLimitExternalList</returns>
        public ApiResponse< HyperflexFeatureLimitExternalList > HyperflexFeatureLimitExternalsGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {

            var localVarPath = "/hyperflex/FeatureLimitExternals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (at != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperflexFeatureLimitExternalList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperflexFeatureLimitExternalList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperflexFeatureLimitExternalList)));
        }

        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of HyperflexFeatureLimitExternalList</returns>
        public async System.Threading.Tasks.Task<HyperflexFeatureLimitExternalList> HyperflexFeatureLimitExternalsGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {
             ApiResponse<HyperflexFeatureLimitExternalList> localVarResponse = await HyperflexFeatureLimitExternalsGetAsyncWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, at);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of &#39;hyperflexFeatureLimitExternal&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="at">Similar to \&quot;$filter\&quot;, but \&quot;at\&quot; is specifically used to filter versioning information properties for records to return. A URI with an \&quot;at\&quot; Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in at operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: at&#x3D;VersionType eq &#39;Configured&#39; at&#x3D;InterestedMos.Moid eq &#39;5b5877e56c6730367acf46cd&#39;  (optional)</param>
        /// <returns>Task of ApiResponse (HyperflexFeatureLimitExternalList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HyperflexFeatureLimitExternalList>> HyperflexFeatureLimitExternalsGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, string at = null)
        {

            var localVarPath = "/hyperflex/FeatureLimitExternals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (at != null) localVarQueryParams.Add("at", Configuration.ApiClient.ParameterToString(at)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperflexFeatureLimitExternalList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperflexFeatureLimitExternalList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperflexFeatureLimitExternalList)));
        }

        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns></returns>
        public void HyperflexFeatureLimitExternalsMoidDelete (string moid)
        {
             HyperflexFeatureLimitExternalsMoidDeleteWithHttpInfo(moid);
        }

        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HyperflexFeatureLimitExternalsMoidDeleteWithHttpInfo (string moid)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidDelete");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HyperflexFeatureLimitExternalsMoidDeleteAsync (string moid)
        {
             await HyperflexFeatureLimitExternalsMoidDeleteAsyncWithHttpInfo(moid);

        }

        /// <summary>
        /// Delete an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsMoidDeleteAsyncWithHttpInfo (string moid)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidDelete");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>HyperflexFeatureLimitExternal</returns>
        public HyperflexFeatureLimitExternal HyperflexFeatureLimitExternalsMoidGet (string moid)
        {
             ApiResponse<HyperflexFeatureLimitExternal> localVarResponse = HyperflexFeatureLimitExternalsMoidGetWithHttpInfo(moid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>ApiResponse of HyperflexFeatureLimitExternal</returns>
        public ApiResponse< HyperflexFeatureLimitExternal > HyperflexFeatureLimitExternalsMoidGetWithHttpInfo (string moid)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidGet");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperflexFeatureLimitExternal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperflexFeatureLimitExternal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperflexFeatureLimitExternal)));
        }

        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of HyperflexFeatureLimitExternal</returns>
        public async System.Threading.Tasks.Task<HyperflexFeatureLimitExternal> HyperflexFeatureLimitExternalsMoidGetAsync (string moid)
        {
             ApiResponse<HyperflexFeatureLimitExternal> localVarResponse = await HyperflexFeatureLimitExternalsMoidGetAsyncWithHttpInfo(moid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <returns>Task of ApiResponse (HyperflexFeatureLimitExternal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<HyperflexFeatureLimitExternal>> HyperflexFeatureLimitExternalsMoidGetAsyncWithHttpInfo (string moid)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidGet");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<HyperflexFeatureLimitExternal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (HyperflexFeatureLimitExternal) Configuration.ApiClient.Deserialize(localVarResponse, typeof(HyperflexFeatureLimitExternal)));
        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns></returns>
        public void HyperflexFeatureLimitExternalsMoidPatch (string moid, HyperflexFeatureLimitExternal body)
        {
             HyperflexFeatureLimitExternalsMoidPatchWithHttpInfo(moid, body);
        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HyperflexFeatureLimitExternalsMoidPatchWithHttpInfo (string moid, HyperflexFeatureLimitExternal body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPatch");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HyperflexFeatureLimitExternalsMoidPatchAsync (string moid, HyperflexFeatureLimitExternal body)
        {
             await HyperflexFeatureLimitExternalsMoidPatchAsyncWithHttpInfo(moid, body);

        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsMoidPatchAsyncWithHttpInfo (string moid, HyperflexFeatureLimitExternal body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPatch");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns></returns>
        public void HyperflexFeatureLimitExternalsMoidPost (string moid, HyperflexFeatureLimitExternal body)
        {
             HyperflexFeatureLimitExternalsMoidPostWithHttpInfo(moid, body);
        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HyperflexFeatureLimitExternalsMoidPostWithHttpInfo (string moid, HyperflexFeatureLimitExternal body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPost");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HyperflexFeatureLimitExternalsMoidPostAsync (string moid, HyperflexFeatureLimitExternal body)
        {
             await HyperflexFeatureLimitExternalsMoidPostAsyncWithHttpInfo(moid, body);

        }

        /// <summary>
        /// Update an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the hyperflexFeatureLimitExternal instance.</param>
        /// <param name="body">hyperflexFeatureLimitExternal to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsMoidPostAsyncWithHttpInfo (string moid, HyperflexFeatureLimitExternal body)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsMoidPost");

            var localVarPath = "/hyperflex/FeatureLimitExternals/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns></returns>
        public void HyperflexFeatureLimitExternalsPost (HyperflexFeatureLimitExternal body)
        {
             HyperflexFeatureLimitExternalsPostWithHttpInfo(body);
        }

        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> HyperflexFeatureLimitExternalsPostWithHttpInfo (HyperflexFeatureLimitExternal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsPost");

            var localVarPath = "/hyperflex/FeatureLimitExternals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task HyperflexFeatureLimitExternalsPostAsync (HyperflexFeatureLimitExternal body)
        {
             await HyperflexFeatureLimitExternalsPostAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create an instance of &#39;hyperflexFeatureLimitExternal&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">hyperflexFeatureLimitExternal to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> HyperflexFeatureLimitExternalsPostAsyncWithHttpInfo (HyperflexFeatureLimitExternal body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling HyperflexFeatureLimitExternalApi->HyperflexFeatureLimitExternalsPost");

            var localVarPath = "/hyperflex/FeatureLimitExternals";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("HyperflexFeatureLimitExternalsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
