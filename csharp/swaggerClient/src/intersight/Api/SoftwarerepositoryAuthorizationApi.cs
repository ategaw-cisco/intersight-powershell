/* 
 * Intersight REST API
 *
 * This is Intersight REST API 
 *
 * OpenAPI spec version: 1.0.9-221
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using intersight.Client;
using intersight.Model;

namespace intersight.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISoftwarerepositoryAuthorizationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>SoftwarerepositoryAuthorizationList</returns>
        SoftwarerepositoryAuthorizationList SoftwarerepositoryAuthorizationsGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null);

        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ApiResponse of SoftwarerepositoryAuthorizationList</returns>
        ApiResponse<SoftwarerepositoryAuthorizationList> SoftwarerepositoryAuthorizationsGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null);
        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>SoftwarerepositoryAuthorization</returns>
        SoftwarerepositoryAuthorization SoftwarerepositoryAuthorizationsMoidGet (string moid, string moid2, string moid3, string moid4, string moid5);

        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>ApiResponse of SoftwarerepositoryAuthorization</returns>
        ApiResponse<SoftwarerepositoryAuthorization> SoftwarerepositoryAuthorizationsMoidGetWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5);
        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns></returns>
        void SoftwarerepositoryAuthorizationsMoidPatch (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SoftwarerepositoryAuthorizationsMoidPatchWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);
        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns></returns>
        void SoftwarerepositoryAuthorizationsMoidPost (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SoftwarerepositoryAuthorizationsMoidPostWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);
        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns></returns>
        void SoftwarerepositoryAuthorizationsPost (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5);

        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SoftwarerepositoryAuthorizationsPostWithHttpInfo (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of SoftwarerepositoryAuthorizationList</returns>
        System.Threading.Tasks.Task<SoftwarerepositoryAuthorizationList> SoftwarerepositoryAuthorizationsGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null);

        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ApiResponse (SoftwarerepositoryAuthorizationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwarerepositoryAuthorizationList>> SoftwarerepositoryAuthorizationsGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null);
        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>Task of SoftwarerepositoryAuthorization</returns>
        System.Threading.Tasks.Task<SoftwarerepositoryAuthorization> SoftwarerepositoryAuthorizationsMoidGetAsync (string moid, string moid2, string moid3, string moid4, string moid5);

        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>Task of ApiResponse (SoftwarerepositoryAuthorization)</returns>
        System.Threading.Tasks.Task<ApiResponse<SoftwarerepositoryAuthorization>> SoftwarerepositoryAuthorizationsMoidGetAsyncWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5);
        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SoftwarerepositoryAuthorizationsMoidPatchAsync (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SoftwarerepositoryAuthorizationsMoidPatchAsyncWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);
        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SoftwarerepositoryAuthorizationsMoidPostAsync (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SoftwarerepositoryAuthorizationsMoidPostAsyncWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5);
        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SoftwarerepositoryAuthorizationsPostAsync (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5);

        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39;
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SoftwarerepositoryAuthorizationsPostAsyncWithHttpInfo (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SoftwarerepositoryAuthorizationApi : ISoftwarerepositoryAuthorizationApi
    {
        private intersight.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwarerepositoryAuthorizationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SoftwarerepositoryAuthorizationApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SoftwarerepositoryAuthorizationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SoftwarerepositoryAuthorizationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = intersight.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public intersight.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>SoftwarerepositoryAuthorizationList</returns>
        public SoftwarerepositoryAuthorizationList SoftwarerepositoryAuthorizationsGet (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null)
        {
             ApiResponse<SoftwarerepositoryAuthorizationList> localVarResponse = SoftwarerepositoryAuthorizationsGetWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, count2, inlinecount2, top2, skip2, filter2, select2, orderby2, expand2, apply2, count3, inlinecount3, top3, skip3, filter3, select3, orderby3, expand3, apply3, count4, inlinecount4, top4, skip4, filter4, select4, orderby4, expand4, apply4, count5, inlinecount5, top5, skip5, filter5, select5, orderby5, expand5, apply5);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>ApiResponse of SoftwarerepositoryAuthorizationList</returns>
        public ApiResponse< SoftwarerepositoryAuthorizationList > SoftwarerepositoryAuthorizationsGetWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null)
        {

            var localVarPath = "/softwarerepository/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (count2 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count2)); // query parameter
            if (inlinecount2 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount2)); // query parameter
            if (top2 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top2)); // query parameter
            if (skip2 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip2)); // query parameter
            if (filter2 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter2)); // query parameter
            if (select2 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select2)); // query parameter
            if (orderby2 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby2)); // query parameter
            if (expand2 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand2)); // query parameter
            if (apply2 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply2)); // query parameter
            if (count3 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count3)); // query parameter
            if (inlinecount3 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount3)); // query parameter
            if (top3 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top3)); // query parameter
            if (skip3 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip3)); // query parameter
            if (filter3 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter3)); // query parameter
            if (select3 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select3)); // query parameter
            if (orderby3 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby3)); // query parameter
            if (expand3 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand3)); // query parameter
            if (apply3 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply3)); // query parameter
            if (count4 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count4)); // query parameter
            if (inlinecount4 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount4)); // query parameter
            if (top4 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top4)); // query parameter
            if (skip4 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip4)); // query parameter
            if (filter4 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter4)); // query parameter
            if (select4 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select4)); // query parameter
            if (orderby4 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby4)); // query parameter
            if (expand4 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand4)); // query parameter
            if (apply4 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply4)); // query parameter
            if (count5 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count5)); // query parameter
            if (inlinecount5 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount5)); // query parameter
            if (top5 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top5)); // query parameter
            if (skip5 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip5)); // query parameter
            if (filter5 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter5)); // query parameter
            if (select5 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select5)); // query parameter
            if (orderby5 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby5)); // query parameter
            if (expand5 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand5)); // query parameter
            if (apply5 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply5)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwarerepositoryAuthorizationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwarerepositoryAuthorizationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwarerepositoryAuthorizationList)));
        }

        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of SoftwarerepositoryAuthorizationList</returns>
        public async System.Threading.Tasks.Task<SoftwarerepositoryAuthorizationList> SoftwarerepositoryAuthorizationsGetAsync (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null)
        {
             ApiResponse<SoftwarerepositoryAuthorizationList> localVarResponse = await SoftwarerepositoryAuthorizationsGetAsyncWithHttpInfo(count, inlinecount, top, skip, filter, select, orderby, expand, apply, count2, inlinecount2, top2, skip2, filter2, select2, orderby2, expand2, apply2, count3, inlinecount3, top3, skip3, filter3, select3, orderby3, expand3, apply3, count4, inlinecount4, top4, skip4, filter4, select4, orderby4, expand4, apply4, count5, inlinecount5, top5, skip5, filter5, select5, orderby5, expand5, apply5);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of &#39;softwarerepositoryAuthorization&#39; instances 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="count">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top">The max number of records to return (optional)</param>
        /// <param name="skip">The number of records to skip (optional)</param>
        /// <param name="filter">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count2">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount2">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top2">The max number of records to return (optional)</param>
        /// <param name="skip2">The number of records to skip (optional)</param>
        /// <param name="filter2">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select2">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby2">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand2">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply2">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count3">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount3">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top3">The max number of records to return (optional)</param>
        /// <param name="skip3">The number of records to skip (optional)</param>
        /// <param name="filter3">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select3">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby3">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand3">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply3">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count4">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount4">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top4">The max number of records to return (optional)</param>
        /// <param name="skip4">The number of records to skip (optional)</param>
        /// <param name="filter4">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select4">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby4">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand4">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply4">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <param name="count5">The $count query option allows clients to request a count of the matching resources. (optional)</param>
        /// <param name="inlinecount5">The $inlinecount query option allows clients to request an inline count of the matching resources included with the resources in the response (optional)</param>
        /// <param name="top5">The max number of records to return (optional)</param>
        /// <param name="skip5">The number of records to skip (optional)</param>
        /// <param name="filter5">Filter criteria for records to return. A URI with a $filter System Query Option identifies a subset of the Entries from the Collection of Entries identified by the Resource Path section of the URI. The subset is determined by selecting only the Entries that satisfy the predicate expression specified by the query option. The expression language that is used in $filter operators supports references to properties and literals. The literal values can be strings enclosed in single quotes, numbers and boolean values (true or false) or any of the additional literal representations shown in the Abstract Type System section. Query examples: $filter&#x3D;Name eq &#39;Bob&#39; $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39;) $filter&#x3D;Tags/any(t: t/Key eq &#39;Site&#39; and t/Value eq &#39;London&#39;)  (optional)</param>
        /// <param name="select5">Specifies a subset of properties to return (optional)</param>
        /// <param name="orderby5">Determines what values are used to order a collection of records (optional)</param>
        /// <param name="expand5">Specify additional attributes or related records to return. Supports only &#39;DisplayNames&#39; attribute now. Query examples: $expand&#x3D;DisplayNames  (optional)</param>
        /// <param name="apply5">Specify one or more transformation operations to perform aggregation on records. The transformations are processed in order with the output from a transformation being used as input for the subsequent transformation. Query examples: $apply&#x3D;groupby((Model), aggregate($count as Total)) $apply&#x3D;groupby((Model), aggregate(AvailableMemory with average as AverageAvailableMemory))  (optional)</param>
        /// <returns>Task of ApiResponse (SoftwarerepositoryAuthorizationList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwarerepositoryAuthorizationList>> SoftwarerepositoryAuthorizationsGetAsyncWithHttpInfo (bool? count = null, string inlinecount = null, int? top = null, int? skip = null, string filter = null, string select = null, string orderby = null, string expand = null, string apply = null, bool? count2 = null, string inlinecount2 = null, int? top2 = null, int? skip2 = null, string filter2 = null, string select2 = null, string orderby2 = null, string expand2 = null, string apply2 = null, bool? count3 = null, string inlinecount3 = null, int? top3 = null, int? skip3 = null, string filter3 = null, string select3 = null, string orderby3 = null, string expand3 = null, string apply3 = null, bool? count4 = null, string inlinecount4 = null, int? top4 = null, int? skip4 = null, string filter4 = null, string select4 = null, string orderby4 = null, string expand4 = null, string apply4 = null, bool? count5 = null, string inlinecount5 = null, int? top5 = null, int? skip5 = null, string filter5 = null, string select5 = null, string orderby5 = null, string expand5 = null, string apply5 = null)
        {

            var localVarPath = "/softwarerepository/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (count != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (inlinecount != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount)); // query parameter
            if (top != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top)); // query parameter
            if (skip != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip)); // query parameter
            if (filter != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (select != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select)); // query parameter
            if (orderby != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby)); // query parameter
            if (expand != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand)); // query parameter
            if (apply != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply)); // query parameter
            if (count2 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count2)); // query parameter
            if (inlinecount2 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount2)); // query parameter
            if (top2 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top2)); // query parameter
            if (skip2 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip2)); // query parameter
            if (filter2 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter2)); // query parameter
            if (select2 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select2)); // query parameter
            if (orderby2 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby2)); // query parameter
            if (expand2 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand2)); // query parameter
            if (apply2 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply2)); // query parameter
            if (count3 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count3)); // query parameter
            if (inlinecount3 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount3)); // query parameter
            if (top3 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top3)); // query parameter
            if (skip3 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip3)); // query parameter
            if (filter3 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter3)); // query parameter
            if (select3 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select3)); // query parameter
            if (orderby3 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby3)); // query parameter
            if (expand3 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand3)); // query parameter
            if (apply3 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply3)); // query parameter
            if (count4 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count4)); // query parameter
            if (inlinecount4 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount4)); // query parameter
            if (top4 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top4)); // query parameter
            if (skip4 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip4)); // query parameter
            if (filter4 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter4)); // query parameter
            if (select4 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select4)); // query parameter
            if (orderby4 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby4)); // query parameter
            if (expand4 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand4)); // query parameter
            if (apply4 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply4)); // query parameter
            if (count5 != null) localVarQueryParams.Add("$count", Configuration.ApiClient.ParameterToString(count5)); // query parameter
            if (inlinecount5 != null) localVarQueryParams.Add("$inlinecount", Configuration.ApiClient.ParameterToString(inlinecount5)); // query parameter
            if (top5 != null) localVarQueryParams.Add("$top", Configuration.ApiClient.ParameterToString(top5)); // query parameter
            if (skip5 != null) localVarQueryParams.Add("$skip", Configuration.ApiClient.ParameterToString(skip5)); // query parameter
            if (filter5 != null) localVarQueryParams.Add("$filter", Configuration.ApiClient.ParameterToString(filter5)); // query parameter
            if (select5 != null) localVarQueryParams.Add("$select", Configuration.ApiClient.ParameterToString(select5)); // query parameter
            if (orderby5 != null) localVarQueryParams.Add("$orderby", Configuration.ApiClient.ParameterToString(orderby5)); // query parameter
            if (expand5 != null) localVarQueryParams.Add("$expand", Configuration.ApiClient.ParameterToString(expand5)); // query parameter
            if (apply5 != null) localVarQueryParams.Add("$apply", Configuration.ApiClient.ParameterToString(apply5)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwarerepositoryAuthorizationList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwarerepositoryAuthorizationList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwarerepositoryAuthorizationList)));
        }

        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>SoftwarerepositoryAuthorization</returns>
        public SoftwarerepositoryAuthorization SoftwarerepositoryAuthorizationsMoidGet (string moid, string moid2, string moid3, string moid4, string moid5)
        {
             ApiResponse<SoftwarerepositoryAuthorization> localVarResponse = SoftwarerepositoryAuthorizationsMoidGetWithHttpInfo(moid, moid2, moid3, moid4, moid5);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>ApiResponse of SoftwarerepositoryAuthorization</returns>
        public ApiResponse< SoftwarerepositoryAuthorization > SoftwarerepositoryAuthorizationsMoidGetWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");

            var localVarPath = "/softwarerepository/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwarerepositoryAuthorization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwarerepositoryAuthorization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwarerepositoryAuthorization)));
        }

        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>Task of SoftwarerepositoryAuthorization</returns>
        public async System.Threading.Tasks.Task<SoftwarerepositoryAuthorization> SoftwarerepositoryAuthorizationsMoidGetAsync (string moid, string moid2, string moid3, string moid4, string moid5)
        {
             ApiResponse<SoftwarerepositoryAuthorization> localVarResponse = await SoftwarerepositoryAuthorizationsMoidGetAsyncWithHttpInfo(moid, moid2, moid3, moid4, moid5);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <returns>Task of ApiResponse (SoftwarerepositoryAuthorization)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SoftwarerepositoryAuthorization>> SoftwarerepositoryAuthorizationsMoidGetAsyncWithHttpInfo (string moid, string moid2, string moid3, string moid4, string moid5)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidGet");

            var localVarPath = "/softwarerepository/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsMoidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SoftwarerepositoryAuthorization>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SoftwarerepositoryAuthorization) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SoftwarerepositoryAuthorization)));
        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns></returns>
        public void SoftwarerepositoryAuthorizationsMoidPatch (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
             SoftwarerepositoryAuthorizationsMoidPatchWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4, moid5, body5);
        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SoftwarerepositoryAuthorizationsMoidPatchWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body5' is set
            if (body5 == null)
                throw new ApiException(400, "Missing required parameter 'body5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");

            var localVarPath = "/softwarerepository/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter
            if (body5 != null && body5.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body5); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body5; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SoftwarerepositoryAuthorizationsMoidPatchAsync (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
             await SoftwarerepositoryAuthorizationsMoidPatchAsyncWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4, moid5, body5);

        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SoftwarerepositoryAuthorizationsMoidPatchAsyncWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");
            // verify the required parameter 'body5' is set
            if (body5 == null)
                throw new ApiException(400, "Missing required parameter 'body5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPatch");

            var localVarPath = "/softwarerepository/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter
            if (body5 != null && body5.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body5); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body5; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsMoidPatch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns></returns>
        public void SoftwarerepositoryAuthorizationsMoidPost (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
             SoftwarerepositoryAuthorizationsMoidPostWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4, moid5, body5);
        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SoftwarerepositoryAuthorizationsMoidPostWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body5' is set
            if (body5 == null)
                throw new ApiException(400, "Missing required parameter 'body5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");

            var localVarPath = "/softwarerepository/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter
            if (body5 != null && body5.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body5); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body5; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SoftwarerepositoryAuthorizationsMoidPostAsync (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
             await SoftwarerepositoryAuthorizationsMoidPostAsyncWithHttpInfo(moid, body, moid2, body2, moid3, body3, moid4, body4, moid5, body5);

        }

        /// <summary>
        /// Update an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="moid">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body">softwarerepositoryAuthorization to update</param>
        /// <param name="moid2">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body2">softwarerepositoryAuthorization to update</param>
        /// <param name="moid3">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body3">softwarerepositoryAuthorization to update</param>
        /// <param name="moid4">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body4">softwarerepositoryAuthorization to update</param>
        /// <param name="moid5">The moid of the softwarerepositoryAuthorization instance.</param>
        /// <param name="body5">softwarerepositoryAuthorization to update</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SoftwarerepositoryAuthorizationsMoidPostAsyncWithHttpInfo (string moid, SoftwarerepositoryAuthorization body, string moid2, SoftwarerepositoryAuthorization body2, string moid3, SoftwarerepositoryAuthorization body3, string moid4, SoftwarerepositoryAuthorization body4, string moid5, SoftwarerepositoryAuthorization body5)
        {
            // verify the required parameter 'moid' is set
            if (moid == null)
                throw new ApiException(400, "Missing required parameter 'moid' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid2' is set
            if (moid2 == null)
                throw new ApiException(400, "Missing required parameter 'moid2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid3' is set
            if (moid3 == null)
                throw new ApiException(400, "Missing required parameter 'moid3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid4' is set
            if (moid4 == null)
                throw new ApiException(400, "Missing required parameter 'moid4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'moid5' is set
            if (moid5 == null)
                throw new ApiException(400, "Missing required parameter 'moid5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");
            // verify the required parameter 'body5' is set
            if (body5 == null)
                throw new ApiException(400, "Missing required parameter 'body5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsMoidPost");

            var localVarPath = "/softwarerepository/Authorizations/{moid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (moid != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid)); // path parameter
            if (moid2 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid2)); // path parameter
            if (moid3 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid3)); // path parameter
            if (moid4 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid4)); // path parameter
            if (moid5 != null) localVarPathParams.Add("moid", Configuration.ApiClient.ParameterToString(moid5)); // path parameter
            if (body5 != null && body5.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body5); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body5; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsMoidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns></returns>
        public void SoftwarerepositoryAuthorizationsPost (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5)
        {
             SoftwarerepositoryAuthorizationsPostWithHttpInfo(body, body2, body3, body4, body5);
        }

        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SoftwarerepositoryAuthorizationsPostWithHttpInfo (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body5' is set
            if (body5 == null)
                throw new ApiException(400, "Missing required parameter 'body5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");

            var localVarPath = "/softwarerepository/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body5 != null && body5.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body5); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body5; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SoftwarerepositoryAuthorizationsPostAsync (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5)
        {
             await SoftwarerepositoryAuthorizationsPostAsyncWithHttpInfo(body, body2, body3, body4, body5);

        }

        /// <summary>
        /// Create an instance of &#39;softwarerepositoryAuthorization&#39; 
        /// </summary>
        /// <exception cref="intersight.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">softwarerepositoryAuthorization to add</param>
        /// <param name="body2">softwarerepositoryAuthorization to add</param>
        /// <param name="body3">softwarerepositoryAuthorization to add</param>
        /// <param name="body4">softwarerepositoryAuthorization to add</param>
        /// <param name="body5">softwarerepositoryAuthorization to add</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SoftwarerepositoryAuthorizationsPostAsyncWithHttpInfo (SoftwarerepositoryAuthorization body, SoftwarerepositoryAuthorization body2, SoftwarerepositoryAuthorization body3, SoftwarerepositoryAuthorization body4, SoftwarerepositoryAuthorization body5)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body2' is set
            if (body2 == null)
                throw new ApiException(400, "Missing required parameter 'body2' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body3' is set
            if (body3 == null)
                throw new ApiException(400, "Missing required parameter 'body3' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body4' is set
            if (body4 == null)
                throw new ApiException(400, "Missing required parameter 'body4' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");
            // verify the required parameter 'body5' is set
            if (body5 == null)
                throw new ApiException(400, "Missing required parameter 'body5' when calling SoftwarerepositoryAuthorizationApi->SoftwarerepositoryAuthorizationsPost");

            var localVarPath = "/softwarerepository/Authorizations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body5 != null && body5.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body5); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body5; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SoftwarerepositoryAuthorizationsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
